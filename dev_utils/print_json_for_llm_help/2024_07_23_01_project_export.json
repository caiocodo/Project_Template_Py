{
    "global_utils.py": "import os\n# Para manipulação de arquivos locais\n\ndef global_utils_run() -> None:\n    print(time_stamp_str() + \"global_utils_run\")\n    \n    load_env_vars(os.path.dirname(__file__), 'main.env')\n    \ndef time_stamp_str() -> str:\n    # Retorna uma string com um timestamp no formato: \"YYYYy_MMm_DDd_HHh_MMm_SSs_mmmms\"\n    # Usado para marcar o tempo de execução de funções\n    from datetime import datetime\n    now = datetime.now()\n    milliseconds = now.microsecond / 1000\n    milliseconds_formatted = f\"{int(milliseconds // 1):03}.{int((milliseconds % 1) * 1000):03}\"\n    return f\"{now.year}y_{now.month:02}m_{now.day:02}d_{now.hour:02}h_{now.minute:02}m_{now.second:02}s_{milliseconds_formatted}ms: \"\n                \ndef load_env_vars(file_directory: str, file_name: str):\n    # Função segura para carregar variaveis de projeto como credenciais, chaves de API, etc.\n\n    from dotenv import load_dotenv\n    # lib: python-dotenv\n    load_dotenv(override=True)\n    load_dotenv(os.path.join(file_directory, file_name))\n    \n    \"\"\" Global Variables Declarations\n    Crie variaveis globais com o mesmo nome das variaveis de ambiente criadas no arquivo .env\n    Siga o exemplo:\n\n    if file_name == 'main.env':\n        global TEST_01\n        TEST_01 = \"TEST_01\"\n        update_globals([TEST_01])\n        \n    Conteúdo do arquivo main.env:\n                                 \n    TEST_01 = \"Valor da variavel TEST_01\"\n    \"\"\"\n    if file_name == 'main.env':\n        global TEST_01\n        TEST_01 = \"TEST_01\"\n        update_globals([TEST_01])\n    elif file_name == 'cedentials.env':\n        global TEST_02\n        TEST_02 = \"TEST_02\"\n        global TEST_03\n        TEST_03 = \"TEST_03\"\n        update_globals([TEST_02, TEST_03])\n    else:\n        raise ValueError(\"Arquivo \" + file_name+ \" não foi tratado corretamente. Revise essa função, load_env_vars.\")\n        \ndef update_globals(var_list):\n    # Used by load_env_vars\n    # Update global variables with the corresponding environment variable values\n    for env_var in var_list:\n        if env_var in globals():\n            globals()[env_var] = os.getenv(globals()[env_var])\n            if globals()[env_var] == None:\n                raise ValueError(f\"\"\"Variavel {env_var} não encontrada no arquivo .env\nCrie variaveis globais com o mesmo nome das variaveis de ambiente criadas no arquivo .env\nSiga o exemplo:\n\nif file_name == 'main.env':\n    global TEST_01\n    TEST_01 = \"TEST_01\"\n    update_globals([TEST_01])\n        \nConteúdo do arquivo main.env:\n                                 \nTEST_01 = \"Valor da variavel TEST_01\"                                 \n\"\"\")",
    "aaa.txt": "uga"
}