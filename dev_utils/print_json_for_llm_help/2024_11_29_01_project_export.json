{
    "main.py": "def main() -> None:\n    print(\"main\")\n    \n    run_mode = \"print_files\"\n    # Valores válidos:\n    # run -> execução normal\n    # debug -> execução com prints de debug\n    # print_files -> execução gera um arquivo JSON com o conteúdo dos arquivos da lista file_paths na pasta output_folder. \n    #   o JSON serve para ser compartilhado com LLMs como chatgpt e claude, que servirão como assistentes do desenvolvimento deste projeto. \n\n    if run_mode == \"print_files\":\n        from dev_utils.print_json_for_llm_help import print_json_for_llm_help\n        # Caminhos podem ser:\n        # 1- relativos ao diretorio do projeto\n        # 2- absolutos\n        file_paths = [\n            r\"main.py\",\n            r\"README.md\",\n            r\"shared_vars.py\",\n            r\"dev_utils/console_log.py\",\n            ]\n        output_folder = f\"dev_utils/print_json_for_llm_help\"\n        print_json_for_llm_help(file_paths, output_folder)\n        return\n\n    # Variáveis globais substituem argumentos repetitivos.\n    import shared_vars\n    shared_vars.shared_state.run_mode = run_mode\n\n    # This is the end of the template.\n    \n    # >>>> Start your code here, inside of main <<<<\n\n    \nif __name__ == \"__main__\":\n    print(\"starting Main.py\")\n    main()",
    "README.md": "Tutorial:\n- Baixe esse template e mantenha a pasta Project_Template aberta\n- Crie um projeto novo no Visual Studio, do tipo \"Python Application\" (Não pode ser no VS Code)\n- Copie os 5 arquivos temp_utils.py, global_utils.py, requirements.txt, main.env e .gitignore\n- Copie as 2 pastas project_config e print_files_for_llm_help\n- Cole tudo na pasta do novo projeto\n- Abra e copie o conteúdo do arquivo Project_Template.py\n- Cole dentro do arquivo .py gerado com o nome do seu novo projeto\n\nFazendo os arquivos aparecerem no projeto do VS:\n- No VS, os arquivos do projeto não aparecem só por estarem na pasta do projeto\n- Clique com o botão direito do mouse na raiz do projeto, onde estará escrito o nome do seu projeto ao lado de [PY]\n- Selecione Add -> Existing Item...\n- Na janela que abriu, mude o filtro (ao lado do botão OK/Add) para \"All Files (*.*)\"\n- Selecione os mesmos 5 arquivos, temp_utils.py, global_utils.py, requirements.txt, main.env e .gitignore\n- Clique agora em Add -> Existing Folder...\n- Selecione uma das 2 pastas project_config ou print_files_for_llm_help\n- Repita isso para a segunda pasta.\n\n\n**IMPORTANTE**\n\nUtilizando esse template:\n- Leia com atenção o conteúdo do arquivo contendo a função main\n- Leia com atenção o arquivo temp_utils.py\n- Leia com atenção o arquivo global_utils.py\n- Limpe ou modifique o arquivo main.env\n- Continue desenvolvendo a main\n",
    "shared_vars.py": "# shared.py\n# Este arquivo é utilizado para compartilhar variáveis entre os arquivos do projeto.\nclass SharedState:\n    def __init__(self):\n        self.run_mode = \"\"\n\nshared_state = SharedState()\n",
    "console_log.py": "import sys\n\nclass DualOutput:\n    def __init__(self, arquivo):\n        self.terminal = sys.stdout\n        self.arquivo = open(arquivo, 'a')\n\n    def write(self, mensagem):\n        self.terminal.write(mensagem)\n        self.arquivo.write(mensagem)\n\n    def flush(self):\n        self.terminal.flush()\n        self.arquivo.flush()\n\n    def close(self):\n        self.arquivo.close()\n\n# Armazena o stdout original\nstdout_original = sys.stdout\n\n# Redireciona stdout para DualOutput\nsys.stdout = DualOutput('output.log')\n\ntry:\n    # Seu código principal aqui\n    print(\"Iniciando o script.\")\n    # ... demais chamadas print()\n    print(\"Finalizando o script.\")\nfinally:\n    # Garante que o arquivo será fechado e stdout será restaurado\n    sys.stdout.close()\n    sys.stdout = stdout_original\n"
}